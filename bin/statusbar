#!/bin/bash

# Color
bold="^fg(white)"

# A/C
if [ "`cat /sys/class/power_supply/AC/online`" == 1 ]; then
  ac="^fg(green)[A/C]"
else
  ac="^fg(red)[A/C]"
fi

# Battery
if [ -e /sys/class/power_supply/BAT0/ ]; then
  if [ "`cat /sys/class/power_supply/BAT0/status`" == "Discharging" ]; then
    time_remaining=", $(acpi -b | awk {'print $5,$6'})"
  else
    time_remaining=""
  fi
  battery=("^fg(green)[Battery]^fg()"
  "`cat /sys/class/power_supply/BAT0/capacity`%"
  "(`cat /sys/class/power_supply/BAT0/status`$time_remaining)"
  )
else
  battery="^fg(red)[Battery]"
fi

public_ip_lookup () {
  ipv4=$(dig +short myip.opendns.com @resolver1.opendns.com)
  ipv4_location=$(geoiplookup $ipv4 | sed -E 's/.+: (.+)/\1/')
  public_ip="^fg() $ipv4($ipv4_location)\n"
  return public_ip
}

mac_addr_lookup () {
  mac=$(macchanger -s $iface | grep --color=never "Current MAC" | sed -E \
    's/Current MAC:\s+(.+)/\1/')
  mac0=$(macchanger -s $iface | grep --color=never "Permanent MAC" | sed -E \
    's/Permanent MAC:\s+(.+)/\1/')
  if [ "$mac" == "$mac0" ]; then
    mac_addr="^fg(red)[MAC] ^fg()$mac"
  else
    mac_addr="^fg(green)[MAC] ^fg()$mac"
  fi
  return mac_addr
}

# ETHERNET
iface="enp3s0"
if [ "$( cat /sys/class/net/enp3s0/operstate )" == "up" ]; then
  ip="${bold}IP:^fg()`ip r | grep default | grep enp3s0 | awk {'print $7'}`"
  eth_status="^fg(green)[Eth] $ip\n"
  mac_addr_lookup $iface
  eth_mac_status="$bold$iface: ^fg()$mac_addr"
  public_ip_lookup
else
  eth_mac_status=""
  eth_status="^fg(red)[Eth]"
fi

# WIFI
iface="wls1"
if [ "$( cat /sys/class/net/wls1/operstate )" == "up" ]; then
  essid=$(iwgetid -r )
  accesspt=$(iwgetid -ar)
  bitrate=$(iwconfig wls1 | xargs | sed -E 's/.+Bit Rate=(.+) Tx-.+/\1/')
  quality=$(iwconfig wls1 | xargs | sed -E 's/.+Quality=(.+) Signal.+/\1/')
  signal=$(iwconfig wls1 | xargs | sed -E \
    's/.+Signal level=(.+)Rx invalid nwid.+/\1/')
  ip="${bold}IP:^fg()`ip r | grep default | grep wls1 | awk {'print $7'}`"
  wifi_status=("^fg(green)[WIFI]^fg()"
  ${essid}"(${accesspt}) ${ip}"
  "${bold}Signal:^fg()${bitrate}(${signal}${quality})"
  )
  mac_addr_lookup $iface
  wifi_mac_status="$bold$iface: ^fg()$mac_addr\n"
  public_ip_lookup
else
  wifi_status="^fg(red)[WIFI]"
  wifi_mac_status=""
fi

# VPN
if ping -W 1 -c 1 10.8.0.1 ; then
  vpn=" ^fg(green)[VPN]"
else
  vpn=" ^fg(red)[VPN]"
fi

# TOR
tor=$(curl -s https://check.torproject.org/ | cat | grep -m 1 \
  Congratulations | xargs | awk {'print $1'})
if [ "$tor" == "Congratulations." ]; then
  tor_status="^fg(green)[TOR]"
else
  tor_status="^fg(red)[TOR]"
fi

# ALSA
if [ "$(amixer get Master | tail -1 | awk {'print $6'})" == "[off]" ]; then
  volume="${bold}Audio: ^fg(red)Mute"
else
  volume=("${bold}Audio:^fg()"
  "$(amixer get Master | tail -1 | awk {'print $4'} | sed -E 's/\[(.+)\]/\1/')"
  )
fi

# HDD
hdd_gb_left=$(df -h | grep "/$" | awk '{print $4}' | sed 's/G//')
hdd_perc_used=$(df -h | grep "/$" | awk '{print $5}' | sed 's/%//')
hdd="${bold}HDD: ^fg()$hdd_perc_used% used ($hdd_gb_left GB left)"

# Core temperature
temp="${bold}Core: ^fg()$(( `cat /sys/class/hwmon/hwmon1/temp2_input`/1000 ))Â°C"

# Reminders
if [ "$(rem)" == "No reminders." ]; then
  remind="^fg(red)[Reminders]"
else
  remind=("^fg(green)[Reminders]\n"
  "^fg()$(rem | grep -v '^$' | sed 1d)"
  )
fi

# dzen output
code=$(echo -e "
$ac ${battery[*]}
${eth_mac_status} ${wifi_mac_status}${eth_status} ${wifi_status[*]}
${tor_status}${vpn}${public_ip}
${volume[*]} $temp $hdd

${bold}Week: ^fg()`date '+%V'` ${bold}Day: ^fg()`date '+%j'` ${remind[*]}
")

# dzen output dimensions
lines=$(echo "$code" | wc -l)
width=$(( $(echo "$code" | wc -L)*6 ))
pos=$(( 1024-$width ))

# dzen command
(echo ""; echo "$code") | dzen2 -l $lines -p \
  -w $width -x $pos -sa r -fn "Inconsolata:size=12" -bg "#080808" -fg "#b2b2b2"\
  -e "onstart=uncollapse,hide,grabkeys;button1=exit;key_space=ungrabkeys,exit"
